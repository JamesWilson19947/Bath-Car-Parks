<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <title>Bath Car Parks</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.3/leaflet.css"
        integrity="sha512-mD70nAW2ThLsWH0zif8JPbfraZ8hbCtjQ+5RU1m4+ztZq6/MymyZeB55pWsi4YAX+73yvcaJyk61mzfYMvtm9w=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>

    <style>
        #map {
            height: 100vh;
        }
    </style>
</head>

<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-4">
                <div id="sidebar">
                    <h2>Bath Car Park Status</h2>
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Occupancy</th>
                                <th>Free Spaces</th>
                                <th>Status</th>
                                <th>Distance</th>
                            </tr>
                        </thead>
                        <tbody id="carParkTableBody">
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-md-8">
                <div id="map"></div>
            </div>

        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.3/leaflet.js"
        integrity="sha512-Dqm3h1Y4qiHUjbhxTuBGQsza0Tfppn53SHlu/uj1f+RT+xfShfe7r6czRf5r2NmllO2aKx+tYJgoxboOkn1Scg=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        const map = L.map('map').setView([51.382168, -2.363052], 16);
        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }).addTo(map);
        async function getData() {
            try {
                let userLocation = null;

                if (navigator.geolocation) {
                try {
                    const position = await new Promise((resolve, reject) => {
                    navigator.geolocation.getCurrentPosition(resolve, reject, { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 });
                    });
                    userLocation = [position.coords.latitude, position.coords.longitude];
                } catch (error) {
                    if (error.code === 1) {
                    console.log('User denied location permission');
                    } else if (error.code === 2) {
                    console.log('Location unavailable');
                    } else if (error.code === 3) {
                    console.log('Timeout expired');
                    } else {
                    console.log('Failed to get user location:', error.message);
                    }
                }
                }
                const response = await fetch('/car-parks');
                const data = await response.json();

                if (userLocation) {
                    data.forEach((carPark) => {
                        const distance = getDistance(userLocation[0], userLocation[1], carPark.lat, carPark.lng);
                        carPark.distance = distance;
                    });
                    data.sort((a, b) => a.distance - b.distance);
                }

                // Add circles for each car park and update the table
                const carParkTableBody = document.getElementById('carParkTableBody');
                carParkTableBody.innerHTML = ''; // clear previous data
                data.forEach((carPark) => {
                    // Calculate the radius of the circle based on the percentage of occupancy
                    const minRadius = 10; // minimum radius size in pixels
                    const radius = Math.max(Math.sqrt(carPark.percentage) * 10, minRadius);

                    // Determine the fill color based on the percentage of occupancy
                    let fillColor;
                    if (carPark.percentage < 50) {
                        fillColor = '#00FF00'; // green
                    } else if (carPark.percentage < 75) {
                        fillColor = '#FFFF00'; // yellow
                    } else {
                        fillColor = '#FF0000'; // red
                    }

                    if (carPark.status == 'Filling') {
                        statusImg = '/images/up-arrow.png';
                        icon = L.icon({
                            iconUrl: statusImg,
                            iconSize: [50, 50],
                        });

                    } else if (carPark.status == 'Emptying') {
                        statusImg = '/images/down-arrow.png';
                        icon = L.icon({

                            iconUrl: statusImg,
                            iconSize: [50, 50],
                        });
                    } else {
                        statusImg = '/images/side-arrow.png';
                        icon = L.icon({
                            iconUrl: statusImg,
                            iconSize: [50, 50],
                        });
                    }


                    // Create the circle and add it to the map
                    const circle = L.circleMarker([carPark.lat, carPark.lng], {
                        radius: radius,
                        fillColor: fillColor,
                        fillOpacity: 0.6,
                        stroke: true
                    }).addTo(map);

                    const status = L.marker([carPark.lat, carPark.lng], { icon }).addTo(map);
                    const freeSpaces = Math.max(carPark.capacity - carPark.occupancy, 0);

                    // Add a row to the table
                    const row = carParkTableBody.insertRow();
                    const nameCell = row.insertCell();
                    const occupancyCell = row.insertCell();
                    const freeSpacesCell = row.insertCell();
                    const statusCell = row.insertCell();
                    const distanceCell = row.insertCell();
                    nameCell.textContent = carPark.name;
                    const occupancyPercentage = Math.round((carPark.occupancy / carPark.capacity) * 100);
                    occupancyCell.textContent = `${carPark.occupancy}/${carPark.capacity} (${occupancyPercentage}%)`;
                    occupancyCell.classList.add(carPark.percentage < 50 ? 'low-occupancy' : (carPark.percentage < 75 ? 'medium-occupancy' : 'high-occupancy'));
                    freeSpacesCell.textContent = freeSpaces;
                    if (userLocation) {
                        const distanceInMiles = getDistanceInMiles(userLocation[0], userLocation[1], carPark.lat, carPark.lng);
                        distanceCell.textContent = `${Math.round(distanceInMiles * 10) / 10} mi`;
                    } else {
                        distanceCell.textContent = 'N/A';
                    }
                    // Create the image element and set its source to the statusImg variable
                    const statusImgEl = document.createElement('img');
                    statusImgEl.src = statusImg;
                    statusImgEl.style.width = '20px';
                    statusImgEl.style.height = '20px';

                    // Append the image element to the status cell
                    statusCell.appendChild(statusImgEl);
                    statusCell.appendChild(document.createTextNode(carPark.status));

                    // Add a popup with car park information to the circle
                    circle.bindPopup(createPopupContent(carPark));
                    status.bindPopup(createPopupContent(carPark));
                });
                function createPopupContent(carPark) {
                    return `
                    <h3>${carPark.name}</h3>
                    <p>Occupancy: ${carPark.occupancy}/${carPark.capacity} (${carPark.percentage}%)</p>
                    <p>Status: ${carPark.status}</p>
                    <p>Last updated: ${carPark.lastUpdated}</p>`;
                }
                function getDistance(lat1, lon1, lat2, lon2) {
                    const R = 6371; // Radius of the earth in km
                    const dLat = deg2rad(lat2 - lat1);
                    const dLon = deg2rad(lon2 - lon1);
                    const a =
                        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                        Math.cos(deg2rad(lat1)) *
                        Math.cos(deg2rad(lat2)) *
                        Math.sin(dLon / 2) *
                        Math.sin(dLon / 2);
                    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                    const distance = R * c; // Distance in km
                    return distance;
                }
                function getDistanceInMiles(lat1, lon1, lat2, lon2) {
                    const earthRadiusInMiles = 3958.8;

                    const dLat = degreesToRadians(lat2 - lat1);
                    const dLon = degreesToRadians(lon2 - lon1);

                    const a =
                        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                        Math.cos(degreesToRadians(lat1)) * Math.cos(degreesToRadians(lat2)) *
                        Math.sin(dLon / 2) * Math.sin(dLon / 2);

                    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

                    return earthRadiusInMiles * c;
                }

                function degreesToRadians(degrees) {
                    return degrees * (Math.PI / 180);
                } function deg2rad(deg) {
                    return deg * (Math.PI / 180);
                }
            } catch (error) {
                console.error(error);
            }
        }


        getData();
    </script>
</body>

</html>